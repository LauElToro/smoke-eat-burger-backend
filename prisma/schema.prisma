generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ItemType {
  FINISHED
  INGREDIENT
}

enum MoveType {
  IN
  OUT
  ADJUST
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
}

model Item {
  id            Int      @id @default(autoincrement())
  sku           String   @unique
  name          String
  type          ItemType
  price         Decimal? @db.Decimal(10, 2)
  reorderPoint  Int      @default(0)
  unit          String   @default("un")
  trackFinished Boolean  @default(false)

  bomsProduct    Bom[]           @relation("product")
  bomsIngredient Bom[]           @relation("ingredient")
  batches        StockBatch[]
  movements      StockMovement[]
  orderItems     OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bom {
  id           Int     @id @default(autoincrement())
  productId    Int
  ingredientId Int
  qtyPerUnit   Decimal @db.Decimal(10, 3)

  product    Item @relation("product", fields: [productId], references: [id])
  ingredient Item @relation("ingredient", fields: [ingredientId], references: [id])
}

model StockBatch {
  id        Int      @id @default(autoincrement())
  itemId    Int
  qty       Decimal  @db.Decimal(12, 3)
  unitCost  Decimal  @db.Decimal(10, 2)
  note      String?
  createdAt DateTime @default(now())

  item      Item            @relation(fields: [itemId], references: [id])
  movements StockMovement[] @relation("BatchMovements") // <â€”
}

model StockMovement {
  id           Int      @id @default(autoincrement())
  itemId       Int
  type         MoveType
  qty          Decimal  @db.Decimal(12, 3)
  unitCost     Decimal  @db.Decimal(10, 2)
  orderId      Int?
  stockBatchId Int?
  note         String?
  createdAt    DateTime @default(now())

  item  Item        @relation(fields: [itemId], references: [id])
  order Order?      @relation("OrderMovements", fields: [orderId], references: [id])
  batch StockBatch? @relation("BatchMovements", fields: [stockBatchId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  status          OrderStatus @default(PENDING)
  paymentProvider String?
  paymentRef      String?

  subtotal    Decimal @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(10, 2)
  tax         Decimal @default(0) @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  cogs        Decimal @default(0) @db.Decimal(10, 2)
  grossProfit Decimal @default(0) @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  items     OrderItem[]
  movements StockMovement[] @relation("OrderMovements")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  itemId    Int
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  lineTotal Decimal @db.Decimal(10, 2)

  order Order @relation(fields: [orderId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])
}

model Expense {
  id        Int      @id @default(autoincrement())
  concept   String
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}
